# name: Build & Test

# on:
#   push:
#     branches:
#       â€“ main

# jobs:
#   cache-npm-build:
#     runs-on: ubuntu-20.04
#     env:
#       ARTIFACTORY_AUTH_TOKEN: ${{ secrets.ARTIFACTORY_AUTH_TOKEN }}

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           token: ${{ secrets.PAT }}

#       - name: Setup NodeJS 14
#         uses: actions/setup-node@v2
#         with:
#           node-version: 14

#       - name: Install yarn
#         run: npm install -g yarn

#       - name: Get yarn cache directory path
#         id: yarn-cache-dir-path
#         run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

#       - name: Cache yarn dependencies
#         uses: actions/cache@v2
#         id: yarn-cache
#         with:
#           path: |
#             ${{ steps.yarn-cache-dir-path.outputs.dir }}
#             **/node_modules
#           key: vivid-cache-yarn-${{ hashFiles('**/package.json') }}

#       - name: Install packages
#         if: steps.yarn-cache.outputs.cache-hit != 'true'
#         run: yarn install

#       - name: Build components
#         run: yarn compile

#       - name: Cache build
#         uses: actions/cache@v2
#         id: build-cache
#         with:
#           path: |
#             common
#             components
#           key: vivid-cache-build-${{ github.event.pull_request.head.sha }}

#   test-safari:

# jobs:
#   cypress-run:
#     runs-on: ubuntu-latest
#     container: cypress/browsers:node14.17.0-chrome91-ff89
#     steps:
#       - uses: actions/checkout@v2
#       - uses: cypress-io/github-action@v2
#         with:
#           build: npm run build
          # start: npm run cy:run:reporter
          


# name: docker chrome headless
# on: [push]
# jobs:
#   cypress-run:
#     runs-on: ubuntu-latest
#     container: cypress/browsers:node14.17.0-chrome91-ff89
#     steps:
#       - uses: actions/checkout@v2
#       - uses: cypress-io/github-action@v2
#         with:
#           build: npm run build
#           start: npm run cy:run:reporter



      #     wait-on: "http://localhost:5000"
      # # after the test run completes
      # # store videos and any screenshots
      # # NOTE: screenshots will be generated only if E2E test failed
      # # thus we store screenshots only on failures
      # # Alternative: create and commit an empty cypress/screenshots folder
      # # to always have something to upload
      # - uses: actions/upload-artifact@v1
      #   if: failure()
      #   with:
      #     name: cypress-screenshots
      #     path: cypress/screenshots
      # # Test run video was always captured, so this action uses "always()" condition
      # - uses: actions/upload-artifact@v1
      #   if: always()
      #   with:
      #     name: cypress-videos
      #     path: cypress/videos